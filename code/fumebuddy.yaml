# You should have a secrets.yaml file in the same directory with wifi_ssid and wifi_password defined
# If the wifi fails to connect or is a brand new setup, it will create a wifi network called FumebuddyFallback
# the password is fumebuddy. Then you can select your wifi network and enter the password.

# Once connected to WIFI, you can access the IP of the device in a browser and it will show you the status of the device.
# It will also allow you to set the TURN_ON and TURN_OFF URL's appropriately.
# Logging will also be visible at this URL.

# The default touch threshold is 250. If you want to adjust it, you can enable the touch sensitivity debug mode in the web console and
# watch the output when the sensor is not being touch and when you touch it.


#substitutions:
  #url_on: "http://192.168.1.40/cm?cmnd=Power%20On"
  #url_off: "http://192.168.1.40/cm?cmnd=Power%20Off"
  #url_on: "http://solderfan.local/switch/solder_fan_relay/turn_on"
  #url_off: "http://solderfan.local/switch/solder_fan_relay/turn_off"

text:
  - platform: template
    name: "On URL"
    id: url_on
    optimistic: true
    mode: text
    restore_value: true
    initial_value: "http://ipaddress/something/turn_on"
  - platform: template
    name: "Off URL"
    id: url_off
    optimistic: true
    mode: text
    restore_value: true
    initial_value: "http://ipaddress/something/turn_on"

esphome:
  name: fumebuddy
  platform: ESP32
  board: esp32dev

  on_boot:
    then:
    - rtttl.play: 'scale_up:d=32,o=5,b=100:c,d,e,c,d,e'

globals:
  - id: manual_override
    type: bool
    restore_value: no
    initial_value: 'false'

web_server:

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "FumebuddyFallback"
    password: "fumebuddy"

captive_portal:

ota:
esp32_touch:
  id: touch_main
  # Use setup_mode for the first time when you want to tune the values of your capacitive sensor
  setup_mode: True

http_request:
    timeout: 1s
api:

binary_sensor:
  - platform: gpio 
    name: "HandsetSensor"
    pin:
      number: GPIO18
      inverted: False
      mode: INPUT_PULLUP
    filters:
    - delayed_on: 100ms
    - delayed_off: 2000ms
    on_press:
    - switch.turn_off: relay_no
    - if:
        condition:
          lambda: |-
            return id(manual_override) == false;
        then:
          - http_request.post:
              url: !lambda |-
                return (id(url_on).state);
          - rtttl.play:
              rtttl: 'scale_up:d=32,o=5,b=100:c,d,e'
    on_release:
    - switch.turn_on: relay_no
    - if:
        condition:
          lambda: |-
            return id(manual_override) == false;
        then:
        - http_request.post:
            url: !lambda return (id(url_off).state);
        - rtttl.play:
            rtttl: 'scale_down:d=32,o=5,b=100:e,d,c'


  
  - platform: esp32_touch
    id: touch_sensor
    name: "ESP32 Touch Pad GPIO2"
    pin: GPIO2
    threshold: 250
    filters:
    - delayed_on: 500ms
    - delayed_off: 500ms
    on_press:
      if:
        condition:
          lambda: |-
            return id(manual_override) == false;
        then:
          - http_request.post:
              url: !lambda return (id(url_on).state);
          - rtttl.play:
              rtttl: 'scale_up:d=32,o=5,b=100:c,d,e'
          - lambda: |-
              id(manual_override) = true;
        else:
          - http_request.post:
              url: !lambda return (id(url_off).state);
          - rtttl.play:
              rtttl: 'scale_down:d=32,o=5,b=100:e,d,c'
          - lambda: |-
              id(manual_override) = false;

switch:
  - platform: gpio
    pin: GPIO12
    id: relay_no
  - platform: template
    name: "Touch Sensitivity Debug Mode"
    id: touch_debug
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(touch_main).set_setup_mode(true);
    turn_off_action:
      - lambda: |-
          id(touch_main).set_setup_mode(false);
  
output:
  - platform: ledc
    pin: GPIO26
    id: rtttl_out

rtttl:
  output: rtttl_out

number:
  - platform: template
    name: "Touch Sensitivity"
    id: touch_sensitivity
    optimistic: true
    mode: box
    min_value: 1
    max_value : 32767
    restore_value: true
    initial_value: 250
    step: 1
    set_action:
      - lambda: |-
          id(touch_sensor).set_threshold(x);
